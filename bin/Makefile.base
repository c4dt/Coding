# prefix to find Coding root
CODING ?= Coding
# what to remove from golint
lint-filter := cat
ifdef EXCLUDE_LINT
lint-filter := grep -vE '$(EXCLUDE_LINT)'
endif
# arguments for go test
GO_TEST_FLAGS ?= -race -v
GO_TEST_EXTRA_FLAGS ?= -failfast

GOPATH := $(shell go env GOPATH)
PATH := $(PATH):$(GOPATH)/bin

.PHONY: test_fmt
test_fmt:
	@echo Checking correct formatting of files
	out=`gofmt -l -s .`; echo "$$out"; [ -z "$$out" ]
	go vet ./...

.PHONY: test_lint
test_lint: $(GOPATH)/bin/golint
	@echo Checking linting of files
	out=`$< ./... | $(lint-filter)`; echo "$$out"; [ -z "$$out" ]
	go mod tidy; out=`git status --porcelain`; echo "$$out"; [ -z "$$out" ]
$(GOPATH)/bin/golint:
	GO111MODULE=off go get golang.org/x/lint/golint

.PHONY: test_goveralls
test_goveralls: $(GOPATH)/bin/goveralls
	$< -service=travis-ci $(GO_TEST_FLAGS) $(addprefix -flags ,$(GO_TEST_EXTRA_FLAGS))
$(GOPATH)/bin/goveralls:
	GO111MODULE=off go get github.com/mattn/goveralls

.PHONY: test
test: test_fmt test_lint test_goveralls 
